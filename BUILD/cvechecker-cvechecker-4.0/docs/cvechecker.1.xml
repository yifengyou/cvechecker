<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<refentry id="refentry-refdb-bug">
  <refmeta>
    <refentrytitle>cvechecker</refentrytitle>

    <manvolnum>1</manvolnum>

    <refmiscinfo class="source">August 17, 2013</refmiscinfo>

    <refmiscinfo class="manual">cvechecker Manual</refmiscinfo>
  </refmeta>

  <refnamediv id="refdb-bug-name">
    <refname>cvechecker</refname>

    <refpurpose>Attempt to identify possible vulnerable software on the
    system</refpurpose>
  </refnamediv>

  <!-- body begins here -->

  <refsynopsisdiv id="refdb-bug-synopsis">
    <cmdsynopsis>
      <command>cvechecker [-i] [-l version.dat] [-b binlist.txt] [-c] [-C]
      [-r] [-s] [-S] [-d] [-D] [-H] [-w watchlist.txt] [-f filename]</command>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1 id="refdb-bug-description">
    <title>Description</title>

    <para>cvechecker is a tool that, simply stated, matches your installed
    software versus an online database of potential vulnerable software and
    report the results back to you.</para>

    <para>To be able to identify which software is installed on your system,
    cvechecker asks you to load a list of filenames (such as the output of a
    <command>find</command> command) into the tool using the -b (or --binlist)
    argument. It will then try to match the files against an internal list of
    known softwares. If it finds a known software title, it will attempt to
    discover the version of this software title. This internal list can be
    updated using the -l (or --loaddata) arguments.</para>

    <para>To identify potential vulnerable software, cvechecker downloads the
    CVE entries from the Mitre site and stores it in the database. The results
    of the CVE data and the scanned software on the system then provides us
    with the means to generate a report, listing software/version sets that
    have one (or more) CVE entries assigned to them.</para>

    <para>cvechecker also supports a watchlist. This is a file that contains
    the CPEs for which you want to watch for CVEs. The watchlist behaves as if
    the selected software is indeed installed on your system (so it will be
    visible in the reports that you pull from cvechecker). Using a watchlist
    allows administrators to add software that is not detectable by cvechecker
    (yet).</para>
  </refsect1>

  <refsect1>
    <title>Usage</title>

    <refsect2>
      <title>Initialization</title>

      <para>To use cvechecker, you first need to initialize the the databases.
      If your installation uses a server RDBMS (instead of sqlite) this
      requires database owner privileges. Please consult the user guide for
      more information on how to initialize the database using SQL files
      (instead of database owner) if this is not allowed on your
      system.</para>

      <programlisting>cvechecker -i</programlisting>

      <para>Next, download the CVE entries from the Internet as well as the
      version detection rules and load them in the database.</para>

      <programlisting>pullcves pull</programlisting>
    </refsect2>

    <refsect2>
      <title>Load software list</title>

      <para>Every time your system changes, you need to (re)load the software
      list in the database. Otherwise, cvechecker will keep on reporting about
      software and versions that you might not have anymore (or not report
      about software that you have). A possible method is to use find to
      identify all executable commands and libraries and load those in
      cvechecker. I also recommend to add /proc/version as this allows
      cvechecker to validate Linux kernel vulnerabilities as well.</para>

      <programlisting>find / -path /mnt -prune -o -path /media -prune -o -type f -perm -o+x &gt; scanlist.txt 
echo "/proc/version" &gt;&gt; scanlist.txt
cvechecker -b filelist.txt</programlisting>

      <para>It is possible to only update a part of the file database when you
      add the -d (--deltaonly) option. This is useful when you integrate
      cvechecker with your package management system. It also supports
      removing a part of the entries in the database (such as when you
      uninstall software) when you add the -D (--deletedeltaonly)
      option.</para>
    </refsect2>

    <refsect2>
      <title>Load watchlist</title>

      <para>Like the software list, you can have cvechecker load a watchlist.
      This load can happen concurrently with the filelist and also supports
      the delta options. Be aware though that, if you do not use the delta
      option, loading a watchlist will reload the database (clearing your
      detected software). As such, it is recommended to use the watchlist at
      the same time with your binary file listing, like so:pr</para>

      <programlisting>cvechecker -b filelist.txt -w watchlist.txt</programlisting>

      <para>In the reports, watchlist-provided software will have a filename
      starting with "&lt;&lt;provided&gt;&gt;" and named after the CPE they
      represent.</para>
    </refsect2>

    <refsect2>
      <title>Load latest CVE entries</title>

      <para>Pull in the latest CVE entries from the Internet (see also
      <command>man pullcves</command>)</para>

      <programlisting>pullcves pull</programlisting>
    </refsect2>

    <refsect2>
      <title>Report on potential vulnerabilities</title>

      <para>To get a report on potential vulnerabilities, run cvechecker with
      the -r argument.</para>

      <programlisting>cvechecker -r</programlisting>

      <para>If you want cvechecker to report on vulnerabilities that have been
      exposed with higher versions of software that you have installed, you
      can add the -H (--reporthigher) option. However, be warned that this
      will give lots of false positives. The upside is that you can find
      potential vulnerabilities in software whose CVE entries doesn't contain
      all affected software versions (some CVEs only - falsely - contain the
      highest version where the vulnerability was present).</para>

      <programlisting>cvechecker -r -H</programlisting>

      <para>If you want to use the output of the command as input for other
      commands (for instance, to create a nice report), you can add the -C
      argument which makes the output csv-like:</para>

      <programlisting>cvechecker -r -C</programlisting>
    </refsect2>

    <refsect2>
      <title>Report on detected software</title>

      <para>To get a report on the detected software, run cvechecker with the
      -s (only software) or -S (software with files that lead to the software
      detection) argument.</para>

      <programlisting>cvechecker -s</programlisting>

      <para>If you want to use the output of the command as input for other
      commands (for instance, to create a nice report), you can add the -C
      argument which makes the output csv-like:</para>

      <programlisting>cvechecker -s -C</programlisting>
    </refsect2>
  </refsect1>

  <refsect1>
    <title>Command Reference</title>

    <para>cvechecker supports the following arguments:</para>

    <variablelist>
      <varlistentry>
        <term>-i</term>

        <term>--initdbs</term>

        <listitem>
          <para>Initialize the databases</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-l &lt;datafile&gt;</term>

        <term>--loaddata=&lt;datafile&gt;</term>

        <listitem>
          <para>Load the version detection rules</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-b &lt;binlist&gt;</term>

        <term>--binlist=&lt;binlist&gt;</term>

        <listitem>
          <para>Load the list of binaries available on the system. Accepts
          standard input if "-" is given.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-c &lt;cvelist&gt;</term>

        <term>--cvedata=&lt;cvelist&gt;</term>

        <listitem>
          <para>Load the CSV file with CVE data. The CSV file can be generated
          with <command>nvd2simple</command>, part of the cvechecker package.
          Normally you don't need to call this argument as it will be done by
          <command>pullcves</command> anyway.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-f &lt;binfilepath&gt;</term>

        <term>--fileinfo=&lt;binfilepath&gt;</term>

        <listitem>
          <para>Load a single file path in cvechecker. This allows you to
          verify if cvechecker can identify the binary or not (as it will
          display the CPE data if it can)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-r</term>

        <term>--runcheck</term>

        <listitem>
          <para>Match the identified software and versions against the known
          CVE entries and report it on the screen</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-C</term>

        <term>--csvoutput</term>

        <listitem>
          <para>Report using CSV-like output.</para>

          <para>Only interesting when used with -r or -s</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-s</term>

        <term>--showinstalled</term>

        <listitem>
          <para>Show the detected software/version sets of this system</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-S</term>

        <term>--showinstalledfiles</term>

        <listitem>
          <para>Show the detected software/version sets of this system
          together with the files that are used to detect this
          software/version set</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-d</term>

        <term>--deltaonly</term>

        <listitem>
          <para>The file passed on through the -b (--binlist) option only
          contains files that need to be added to the file database (and
          checked for versions) rather than a full file system dump</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-D</term>

        <term>--deletedeltaonly</term>

        <listitem>
          <para>The file passed on through the -b (--binlist) option only
          contains files that have been uninstalled from the system, and thus
          can be removed from the database</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-H</term>

        <term>--reporthigher</term>

        <listitem>
          <para>Do not only report on CVEs that affect software installed on
          your system, but also on CVEs that affect higher versions of the
          software that is installed on your system</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-w &lt;watchlist&gt;</term>

        <term>--watchlist=&lt;watchlist&gt;</term>

        <listitem>
          <para>Load the watchlist information (a file containing CPE entries
          - one per line - using the official CPE syntax)</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Configuration File</title>

    <para>cvechecker will read the configuration file pointed towards by the
    CVECHECKER_CONFFILE variable. If that variable is not set,
    ~/.cvechecker.rc, /usr/local/etc/cvechecker.conf or /etc/cvechecker.conf,
    whichever comes first. This file contains the locations as well as other
    static parameters for the cvechecker application. An example configuration
    file is:</para>

    <programlisting>#
# Generic settings
#
dbtype = "mysql";
#dbtype = "sqlite3";
cvecache = "/var/lib/cvechecker/cache";
datadir = "/usr/share/cvechecker";
stringcmd = "/usr/bin/strings -n 3 '@file@'";
version_url = "https://raw.github.com/sjvermeu/cvechecker/master/versions.dat";
#userkey = "servertag";

#
# For SQLite3
#
sqlite3: {
  localdb = "/var/lib/cvechecker/local";
  globaldb = "/var/lib/cvechecker/global.db";
}

#
# For MySQL
#
mysql: {
  dbname = "cvechecker";
  dbuser = "cvechecker_rw";
  dbpass = "passwordforcvechecker_rw";
  dbhost = "mysql.company.com";
};</programlisting>

    <para>The following options are supported:</para>

    <itemizedlist>
      <listitem>
        <para>dbtype tells the cvechecker application which back-end to use.
        Currently, "sqlite", "sqlite3" and "mysql" are supported (sqlite and
        sqlite3 result in the same back-end)</para>
      </listitem>

      <listitem>
        <para>cvecache is a (cvechecker writeable) directory where pullcves
        will download all XML files and store the transformed XML2CSV files
        (containing the CVE entry data). Although it is not used anymore after
        being imported into the local databases, pullcves relies on the
        availability of the XML files to find out if it needs to (re)download
        and import CVE entries. So if you want to clean out the directory,
        make (empty) files named after the XML files so that pullcves does not
        redownload and reimport the CVE entry data (not that this will render
        the application unusable, but it takes a while)</para>
      </listitem>

      <listitem>
        <para>datadir is a directory where cvechecker-related files are
        stored, including the XSLT transformation files used to convert CVE
        XML files in CSV files as well as the sample reporting files as used
        in this document</para>
      </listitem>

      <listitem>
        <para>stringcmd is the command that cvechecker launches against a file
        to get the files' content. Currently, this is the only supported
        method for cvechecker to identify the software/version.</para>
      </listitem>

      <listitem>
        <para>version_url is the location where pullcves can find the latest
        software/version matching rules to identify installed software on the
        system.</para>
      </listitem>

      <listitem>
        <para>servertag is an optional setting that is used in case of server
        RDBMS backends to differentiate between the cvechecker clients. It is
        optional, because cvechecker already uses the clients' hostname as a
        key, but users can define a second one. This can be both because they
        want to run multiple clients from the same system/hostname, or because
        they want a more proper key for their identification (such as a server
        serial id or asset tag). This key is displayed in the reports.</para>
      </listitem>

      <listitem>
        <para>sqlite3: combines all sqlite specific settings, which
        are:</para>

        <itemizedlist>
          <listitem>
            <para>localdb is a (cvechecker writeable) directory where
            cvechecker will store its sqlite3 databases containing the CPE
            data (identification information of software/versions) as well as
            the local systems' matching file/software pairs and all downloaded
            CVE entries</para>
          </listitem>

          <listitem>
            <para>globaldb is a (cvechecker writeable) sqlite3 database
            containing the software/version matching rules and CPEs associated
            with these rules</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>mysql: combines all mysql specific settings, which are:</para>

        <itemizedlist>
          <listitem>
            <para>dbname is the name of the cvechecker database</para>
          </listitem>

          <listitem>
            <para>dbuser is the user that cvechecker uses to connect to the
            database</para>
          </listitem>

          <listitem>
            <para>dbpass is the password that cvechecker uses to connect to
            the database and authenticate itself</para>
          </listitem>

          <listitem>
            <para>dbhost is the hostname where the database resides</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </refsect1>

  <refsect1>
    <title>cvechecker is not complete</title>

    <para>The strength of cvechecker can only be fully used if the list of
    supported software is huge. Currently, the list is too small to cover most
    systems. However, if you want to help us out in creating a larger
    database, please read on.</para>

    <para>The format used to import software detection rules is as
    follows:</para>

    <programlisting>,[filepart],1,[fileregexp],[contentregexp],a,[vendor],[product],[version],[update],[edition],[language]</programlisting>

    <para>The first comma tells cvechecker what the field separator is, so if
    you need to use the comma in a regular expression, you can use a different
    field separator. Just start the line with the separator.</para>

    <itemizedlist>
      <listitem>
        <para>filepart is a string which cvechecker will match against the
        filename (not fully qualified). If it matches, cvechecker will
        continue with this file's investigation. This is merely for
        performance reasons</para>
      </listitem>

      <listitem>
        <para>1 is the type of check that cvechecker will execute to find out
        about the software's version. Currently, only 1 is supported. In the
        future, more methods will be added.</para>

        <itemizedlist>
          <listitem>
            <para>The "1" method uses the output of <command>strings
            &lt;file&gt;</command>. The output is then matched against a
            regular expression (with grouping) and the results of the matches
            are then used to identify the version, edition, ... of the
            software</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>fileregexp is a regular expression statement that cvechecker
        will run against the filename (not fully qualified). If it matches,
        cvechecker will continue with this file's investigation.</para>
      </listitem>

      <listitem>
        <para>contextregexp is a regular expression statement that cvechecker
        will run against the output of the <command>strings
        &lt;file&gt;</command> command. If it matches, the same regular
        expressions' grouping output will be used to fill up the metadata
        about the software</para>
      </listitem>

      <listitem>
        <para>a means that this is an application match. Other values are h
        (hardware) or o (operating system). From this point onwards, all next
        fields are part of the CPE specification</para>
      </listitem>

      <listitem>
        <para>vendor is the vendor name of the software. You can deduce the
        vendor name by surfing to the software's homepage/vendor's homepage.
        The vendor name is the domainname, without any prefix or suffix. For
        instance, www.redhat.com yields "redhat". If no vendor exists, then
        the vendor is the name of the author. For instance, Sven Vermeulen
        yields "sven_vermeulen".</para>
      </listitem>

      <listitem>
        <para>product is the name of the software title itself</para>
      </listitem>

      <listitem>
        <para>version is the version of the software. It will most likely use
        grouping references (\1, \2, ...) from the regular expression</para>
      </listitem>

      <listitem>
        <para>update is the update of the software. It will either be empty,
        or use the grouping references (\1, \2, ...) from the regular
        expression</para>
      </listitem>

      <listitem>
        <para>edition is the edition of the software. It will either be empty,
        or use the grouping references (\1, \2, ...) from the regular
        expression</para>
      </listitem>

      <listitem>
        <para>language is the language of the software. It will either be
        empty, or use the grouping references (\1, \2, ...) from the regular
        expression</para>
      </listitem>
    </itemizedlist>

    <para>I have mentioned CPE. CPE stands for Common Platform Enumeration and
    is a standard for identifying a product with version. More information on
    CPE can be found at http://nvd.nist.gov/cpe.cfm and
    http://cpe.mitre.org/specification/index.html.</para>

    <para>A few examples of these detection rules:</para>

    <programlisting>,ncftp,1,ncftp,^.*NcFTP ([0-9\.]+)/([0-9]+) .*,a,ncftp_software,ncftp,\1,\2,,
,libflashplayer.so,1,libflashplayer.so,FlashPlayer_([0-9]+)_([0-9]+)_([0-9]+)_([0-9]+)_FlashPlayer,a,adobe,flash_player,\1.\2.\3.\4,,,
,perl,1,perl.*,/usr/lib/perl5/site_perl/([^/]+)/,a,perl,perl,\1,,,</programlisting>
  </refsect1>

  <refsect1 id="refdb-bug-author">
    <title>Author</title>

    <para>cvechecker was written by Sven Vermeulen
    &lt;sven.vermeulen@siphos.be&gt;.</para>
  </refsect1>
</refentry>
