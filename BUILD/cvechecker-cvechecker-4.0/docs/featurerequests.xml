<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Feature Requests</title>

    <author>
      <personname><firstname>Sven</firstname><surname>Vermeulen</surname></personname>
    </author>

    <pubdate>2013-09-18</pubdate>
  </info>

  <section>
    <title>Requested Features</title>

    <para>The following table lists the feature requests that are currently
    received but not part of a stable released version.</para>

    <table>
      <title>List of requested features</title>

      <tgroup cols="5">
        <thead>
          <row>
            <entry>Title</entry>

            <entry>Who Requested</entry>

            <entry>When requested</entry>

            <entry>Priority</entry>

            <entry>State</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Distribution specific checks</entry>

            <entry>Nigel Horne, Sven Vermeulen</entry>

            <entry>2010-08-24</entry>

            <entry>Medium</entry>

            <entry>Draft</entry>
          </row>

          <row>
            <entry>End Of Support / End Of Life Information</entry>

            <entry>Sven Vermeulen</entry>

            <entry>2011-06-02</entry>

            <entry>Medium</entry>

            <entry>Draft</entry>
          </row>

          <row>
            <entry>Ignore potential vulnerabilities from within cvechecker
            (without using cvereport)</entry>

            <entry>"dummys" on GitHub (issue #10)</entry>

            <entry>2013-09-18</entry>

            <entry>Medium</entry>

            <entry>Draft</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Distribution-specific checks</title>

      <note>
        <para>This request is still in draft (meaning it has not been
        started). Feedback (or perhaps even patches) are greatly
        appreciated.</para>
      </note>

      <para>Support a distribution specific check script (most likely using
      the cvechecker output) that investigates if a vulnerability hasn't been
      solved by the distribution itself through an applied patch (rather than
      a version upgrade). The check script itself should be a wrapper that
      detects on which distribution the script is being ran (/etc/*release)
      and then calls the script particularly made for that distribution (on a
      predefined location, say lib/cvechecker/scripts).</para>

      <para>The distribution-specific scripts must adhere to a predefined
      input/output scheme, returncodes and such.</para>

      <para>They should support a human-friendly and computer-parsable
      output.</para>

      <para>A sample script is available in the cvechecker distribution,
      <filename>scripts/cvedebian</filename>, courtesy of Nigel Horne.</para>
    </section>

    <section>
      <title>End Of Support / End Of Life Information</title>

      <note>
        <para>This request is still in draft (meaning it has not been
        started). Feedback (or perhaps even patches) are greatly
        appreciated.</para>
      </note>

      <para>Part of keeping a system in a secure state is to make sure that
      the software installed is not end-of-support or end-of-life. Perhaps
      this can be included in the information that CVE checker pulls in (or
      can be fed) so that the reports generated from it can include this
      information too?</para>
    </section>

    <section>
      <title>Ignore potential vulnerabilities</title>

      <note>
        <para>This request is still in draft (meaning it has not been
        started). Feedback (or perhaps even patches) are greatly
        appreciated.</para>
      </note>

      <para>Currently, false positives need to be handled by an XML/XSLT hack
      through the cvereport command. This means that the false positives need
      to be entered (manually) in an XML file.</para>

      <para>It would be nice to update cvechecker itself so that these false
      positives can be handled from within the tool.</para>

      <para>For instance (hypothetical code listing), to ignore a false
      positive:</para>

      <programlisting>$ cvechecker --invalidate --file /usr/bin/sudo --cve CVE-2013-1441</programlisting>

      <para>To acknowledge one (i.e. make differentiation in report if it is a
      new one or not):</para>

      <programlisting>$ cvechecker --acknowledge --file /usr/bin/sudo --cve CVE-2013-1441</programlisting>

      <para>The output of cvechecker can then be extended with this
      information (Status: New, Acknowledged or Invalid), perhaps even
      ignoring the invalid ones.</para>
    </section>
  </section>
</article>
